#!/usr/bin/env ruby

# Post-install hook for Dotcloud, see
# http://docs.dotcloud.com/guides/postinstall/

require 'yaml'

class PostInstall

  def sanitycheck()
    puts "Running in " + ENV['PWD']
    if ENV['USER'] != 'dotcloud'
      puts "Doesn't look like we're really running on dotcloud, skip postinstall"
      exit 1
    end
  end

  def capture_stdout
    s = StringIO.new
    oldstdout = $stdout
    $stdout = s
    yield
    s.string
  ensure
    $stdout = oldstdout
  end

  def writeconfig()
    infile = "../environment.yml"
    outfile = "config/database.yml"
    # Write our database config to the right place.
    if ! File.exist? infile
      puts infile + " not found. Are we not on dotcloud?"
      puts "Currently in " + Dir.pwd
      #puts "Environment is:"
      #puts ENV.to_hash.to_yaml
      exit 1
    else
      dotcloud_env = YAML::load(File.open(infile, 'r'))
      database_config = {
        "production"=> {
          "adapter"=> "postgresql",
          "encoding"=> "unicode",
          "database"=> "shareabouts",
          "pool"=> 5,
          "username"=> dotcloud_env["DOTCLOUD_DATA_SQL_LOGIN"],
          "password"=> dotcloud_env["DOTCLOUD_DATA_SQL_PASSWORD"],
          "host"=> dotcloud_env["DOTCLOUD_DATA_SQL_HOST"],
          "port"=> dotcloud_env["DOTCLOUD_DATA_SQL_PORT"].to_i,
          # No template because dotcloud doesn't use one for postgis.
        }
      }

      database_config_file = File.open(outfile, "w")
      database_config_file.write(database_config.to_yaml)
      database_config_file.close()
      puts "Database config written to " + outfile + " based on " + infile
    end
  end

  # def database()
  #   ## This fails on the first run apparently because the database host isn't
  #   ## pingable yet when we run it; dotcloud doesn't finish doing DNS
  #   ## setup until you have a successful build? not sure.
  #   #results = capture_stdout {Rake.application['db:create'].invoke}
  #   puts "Checking rake version..."
  #   system 'which rake'
  #   system 'rake --version'

  #   if not system 'rake  db:create'
  #     exit 1
  #   end
  #   if not system 'rake  db:migrate'
  #     exit 1
  #   end
  # end

  def assets()
    puts 'Precompiling assets. Ignore messages like "fatal: Not a git repository"'
    if not system 'rake assets:precompile'
      exit 1
    end
  end

  def main()
    sanitycheck
    writeconfig
    # database
    assets
  end

end


PostInstall.new.main
